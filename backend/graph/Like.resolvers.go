package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"log"

	"github.com/Andreworoh27/farebook/graph/model"
	"github.com/google/uuid"
)

// CreateLikePost is the resolver for the createLikePost field.
func (r *mutationResolver) CreateLikePost(ctx context.Context, newLike model.NewLike) (*model.Like, error) {
	var checkLike *model.Like
	if err := r.DB.First(&checkLike, "post_id = ? AND user_id = ?", newLike.PostID, newLike.UserID).Error; err == nil {
		// If a like with the same post_id and user_id already exists, return an error
		return nil, errors.New(checkLike.LikeID)
	}

	// If no existing like found, create a new one
	like := &model.Like{
		LikeID: uuid.NewString(),
		PostID: newLike.PostID,
		UserID: newLike.UserID,
	}

	log.Println("like user id:", newLike.UserID)
	log.Println("like post id:", newLike.PostID)

	// Save the new like to the database
	if err := r.DB.Save(&like).Error; err != nil {
		return nil, err
	}

	return like, nil
}

// DeleteLikePost is the resolver for the deleteLikePost field.
func (r *mutationResolver) DeleteLikePost(ctx context.Context, likeID string) (*model.Like, error) {
	log.Println("trigger delete like with id : ", likeID)
	var like *model.Like
	if err := r.DB.First(&like, "like_id = ?", likeID).Error; err != nil {
		return nil, err
	}
	return like, r.DB.Delete(&like).Error
}

// GetPostLikes is the resolver for the getPostLikes field.
func (r *queryResolver) GetPostLikes(ctx context.Context, postID string) ([]*model.Like, error) {
	var postLikes []*model.Like
	return postLikes, r.DB.Find(&postLikes, "post_id = ?", postID).Error
}

// GetUserLikes is the resolver for the getUserLikes field.
func (r *queryResolver) GetUserLikes(ctx context.Context, userID string) ([]*model.Like, error) {
	var userLikes []*model.Like
	return userLikes, r.DB.Find(&userLikes, "user_id = ?", userID).Error
}

// GetLikePost is the resolver for the getLikePost field.
func (r *queryResolver) GetLikePost(ctx context.Context, likeID string) (*model.Like, error) {
	var like *model.Like
	return like, r.DB.First(&like, "like_id = ?", likeID).Error
}
